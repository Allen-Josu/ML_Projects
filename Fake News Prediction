{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a561d507",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:50.317031Z",
     "iopub.status.busy": "2025-03-21T09:21:50.316640Z",
     "iopub.status.idle": "2025-03-21T09:21:51.360186Z",
     "shell.execute_reply": "2025-03-21T09:21:51.358766Z"
    },
    "papermill": {
     "duration": 1.05022,
     "end_time": "2025-03-21T09:21:51.361986",
     "exception": false,
     "start_time": "2025-03-21T09:21:50.311766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/fake-news-prediction-train-data/Fake News Train Data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfec3595",
   "metadata": {
    "papermill": {
     "duration": 0.002894,
     "end_time": "2025-03-21T09:21:51.368430",
     "exception": false,
     "start_time": "2025-03-21T09:21:51.365536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Importing Dependancies**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d7e290fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:51.375974Z",
     "iopub.status.busy": "2025-03-21T09:21:51.375436Z",
     "iopub.status.idle": "2025-03-21T09:21:53.640883Z",
     "shell.execute_reply": "2025-03-21T09:21:53.639888Z"
    },
    "papermill": {
     "duration": 2.271365,
     "end_time": "2025-03-21T09:21:53.642822",
     "exception": false,
     "start_time": "2025-03-21T09:21:51.371457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a2b00d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:53.650570Z",
     "iopub.status.busy": "2025-03-21T09:21:53.650133Z",
     "iopub.status.idle": "2025-03-21T09:21:53.748085Z",
     "shell.execute_reply": "2025-03-21T09:21:53.746967Z"
    },
    "papermill": {
     "duration": 0.103714,
     "end_time": "2025-03-21T09:21:53.749878",
     "exception": false,
     "start_time": "2025-03-21T09:21:53.646164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9f0807dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:53.757825Z",
     "iopub.status.busy": "2025-03-21T09:21:53.757466Z",
     "iopub.status.idle": "2025-03-21T09:21:53.763870Z",
     "shell.execute_reply": "2025-03-21T09:21:53.762902Z"
    },
    "papermill": {
     "duration": 0.012175,
     "end_time": "2025-03-21T09:21:53.765497",
     "exception": false,
     "start_time": "2025-03-21T09:21:53.753322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['a', 'about', 'above', 'after', 'again', 'against', 'ain', 'all', 'am', 'an', 'and', 'any', 'are', 'aren', \"aren't\", 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', 'can', 'couldn', \"couldn't\", 'd', 'did', 'didn', \"didn't\", 'do', 'does', 'doesn', \"doesn't\", 'doing', 'don', \"don't\", 'down', 'during', 'each', 'few', 'for', 'from', 'further', 'had', 'hadn', \"hadn't\", 'has', 'hasn', \"hasn't\", 'have', 'haven', \"haven't\", 'having', 'he', \"he'd\", \"he'll\", 'her', 'here', 'hers', 'herself', \"he's\", 'him', 'himself', 'his', 'how', 'i', \"i'd\", 'if', \"i'll\", \"i'm\", 'in', 'into', 'is', 'isn', \"isn't\", 'it', \"it'd\", \"it'll\", \"it's\", 'its', 'itself', \"i've\", 'just', 'll', 'm', 'ma', 'me', 'mightn', \"mightn't\", 'more', 'most', 'mustn', \"mustn't\", 'my', 'myself', 'needn', \"needn't\", 'no', 'nor', 'not', 'now', 'o', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 're', 's', 'same', 'shan', \"shan't\", 'she', \"she'd\", \"she'll\", \"she's\", 'should', 'shouldn', \"shouldn't\", \"should've\", 'so', 'some', 'such', 't', 'than', 'that', \"that'll\", 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', 'these', 'they', \"they'd\", \"they'll\", \"they're\", \"they've\", 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 've', 'very', 'was', 'wasn', \"wasn't\", 'we', \"we'd\", \"we'll\", \"we're\", 'were', 'weren', \"weren't\", \"we've\", 'what', 'when', 'where', 'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'won', \"won't\", 'wouldn', \"wouldn't\", 'y', 'you', \"you'd\", \"you'll\", 'your', \"you're\", 'yours', 'yourself', 'yourselves', \"you've\"]\n"
     ]
    }
   ],
   "source": [
    "# printing the stopwords\n",
    "print(stopwords.words(\"english\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "267596eb",
   "metadata": {
    "papermill": {
     "duration": 0.003001,
     "end_time": "2025-03-21T09:21:53.772043",
     "exception": false,
     "start_time": "2025-03-21T09:21:53.769042",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Loading the Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "098022e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:53.779491Z",
     "iopub.status.busy": "2025-03-21T09:21:53.779169Z",
     "iopub.status.idle": "2025-03-21T09:21:56.661097Z",
     "shell.execute_reply": "2025-03-21T09:21:56.660005Z"
    },
    "papermill": {
     "duration": 2.887879,
     "end_time": "2025-03-21T09:21:56.663052",
     "exception": false,
     "start_time": "2025-03-21T09:21:53.775173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"/kaggle/input/fake-news-prediction-train-data/Fake News Train Data.csv\")\n",
    "\n",
    "df = data.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ec70a3e",
   "metadata": {
    "papermill": {
     "duration": 0.003253,
     "end_time": "2025-03-21T09:21:56.669879",
     "exception": false,
     "start_time": "2025-03-21T09:21:56.666626",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Exploring the Data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1238713f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:56.678175Z",
     "iopub.status.busy": "2025-03-21T09:21:56.677733Z",
     "iopub.status.idle": "2025-03-21T09:21:56.706944Z",
     "shell.execute_reply": "2025-03-21T09:21:56.705827Z"
    },
    "papermill": {
     "duration": 0.035412,
     "end_time": "2025-03-21T09:21:56.708721",
     "exception": false,
     "start_time": "2025-03-21T09:21:56.673309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>author</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n",
       "      <td>Darrell Lucus</td>\n",
       "      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>FLYNN: Hillary Clinton, Big Woman on Campus - ...</td>\n",
       "      <td>Daniel J. Flynn</td>\n",
       "      <td>Ever get the feeling your life circles the rou...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Why the Truth Might Get You Fired</td>\n",
       "      <td>Consortiumnews.com</td>\n",
       "      <td>Why the Truth Might Get You Fired October 29, ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>15 Civilians Killed In Single US Airstrike Hav...</td>\n",
       "      <td>Jessica Purkiss</td>\n",
       "      <td>Videos 15 Civilians Killed In Single US Airstr...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Iranian woman jailed for fictional unpublished...</td>\n",
       "      <td>Howard Portnoy</td>\n",
       "      <td>Print \\nAn Iranian woman has been sentenced to...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                              title              author  \\\n",
       "0   0  House Dem Aide: We Didn’t Even See Comey’s Let...       Darrell Lucus   \n",
       "1   1  FLYNN: Hillary Clinton, Big Woman on Campus - ...     Daniel J. Flynn   \n",
       "2   2                  Why the Truth Might Get You Fired  Consortiumnews.com   \n",
       "3   3  15 Civilians Killed In Single US Airstrike Hav...     Jessica Purkiss   \n",
       "4   4  Iranian woman jailed for fictional unpublished...      Howard Portnoy   \n",
       "\n",
       "                                                text  label  \n",
       "0  House Dem Aide: We Didn’t Even See Comey’s Let...      1  \n",
       "1  Ever get the feeling your life circles the rou...      0  \n",
       "2  Why the Truth Might Get You Fired October 29, ...      1  \n",
       "3  Videos 15 Civilians Killed In Single US Airstr...      1  \n",
       "4  Print \\nAn Iranian woman has been sentenced to...      1  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6920d721",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:56.717362Z",
     "iopub.status.busy": "2025-03-21T09:21:56.716997Z",
     "iopub.status.idle": "2025-03-21T09:21:56.723147Z",
     "shell.execute_reply": "2025-03-21T09:21:56.722086Z"
    },
    "papermill": {
     "duration": 0.01237,
     "end_time": "2025-03-21T09:21:56.724875",
     "exception": false,
     "start_time": "2025-03-21T09:21:56.712505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20800, 5)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the number of rows and columns\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c2fd9e2",
   "metadata": {
    "papermill": {
     "duration": 0.003466,
     "end_time": "2025-03-21T09:21:56.732389",
     "exception": false,
     "start_time": "2025-03-21T09:21:56.728923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Data Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7317ab36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-21T09:21:56.741492Z",
     "iopub.status.busy": "2025-03-21T09:21:56.741132Z",
     "iopub.status.idle": "2025-03-21T09:21:56.758054Z",
     "shell.execute_reply": "2025-03-21T09:21:56.756902Z"
    },
    "papermill": {
     "duration": 0.023658,
     "end_time": "2025-03-21T09:21:56.759788",
     "exception": false,
     "start_time": "2025-03-21T09:21:56.736130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id           0\n",
       "title      558\n",
       "author    1957\n",
       "text        39\n",
       "label        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# counting the number of missing values in the dataset\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2890831a",
   "metadata": {
    "papermill": {
     "duration": 0.003785,
     "end_time": "2025-03-21T09:21:56.767750",
     "exception": false,
     "start_time": "2025-03-21T09:21:56.763965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6929608,
     "sourceId": 11114126,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.112408,
   "end_time": "2025-03-21T09:21:57.593369",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-21T09:21:47.480961",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
